Version 0.10.2: February 28, 2015

new apis to save graphs to output streams.
changed apis for creating entity concepts & relations to include an optional IRI for creating a nested mutable terminology graph

Version 0.10.1: February 26, 2015

TDD: updated test.gov.nasa.jpl.omf.scala.core.functionalAPI.OWLVocabularyTest to exercise the new API for extending mutable graphs after construction.

Version 0.10.0: February 26, 2015

Minor: refactored the datatype relationships
Major: loosened the restrictions on the mutable graph APIs regarding extension relationships

In OMF, graphs can extend other graphs (within restrictions).

In 0.9.1, constructing a graph G required specifying the other graphs G extends.
That is, the set of graphs that G extends is defined when constructing G and is immutable afterwards.
This had some nice benefits:
- this kept the API simple (no need to worry about the set of extensions changing after construction)
- this ensured a correct-by-construction guarantee that all graph extension relationships are acyclic 
  (since the extensions must be specified when a graph is created and the API only supports creating one graph at a time)

Unfortunately, this correct-by-construction guarantee of acyclic extension relationships is too strong for UML/SysML models we want to map to OMF.

In 0.10.0, the API for creating mutable TBox graphs separates constructing a mutable TBox graph from adding extensions to a mutable TBox graph.
However, the API for creating immutable TBox graphs retains the correct-by-construction principle that the extension relationships must be specified
when creating an immutable TBox graph. That is, the API retains the 0.9.1 guarantee that extension relationships involving immutable TBox graphs will be acyclic. 

The possibility of cycles of extension relationships among mutable TBox graphs has significant implications that will require additional capabilities.

Version 0.9.1: February 4, 2015

Update versions of dependencies
Update Eclipse .classpath

Version 0.9.0: February 4, 2015

TerminologyKind (definition vs. designation)
taxonomy matrix of ModelRadaRelationships

Version 0.8.1: February 2, 2015

scalaz-stream dependency

Version 0.8: January 28, 2015

updated IRI operations (removed toObjectPropertyIRI because the naming convention is not a strict requirement for the reification pattern)
updated test: IRITests (iri => backbone conversions)
new test: IMCEFoundationLoadTest

Version 0.7: January 21, 2015

Separate the operations for immutable vs. mutable graphs to simplify bindings.

Version 0.6.2: January 21, 2015

Refactoring based on Semmle static analysis

Version 0.6.1: January 20, 2015

Refactoring based on Semmle static analysis

Version 0.6: January 18, 2015

Added operation to check whether an IRI is a backbone IRI
Added operations to save instance & terminology graphs
Updated OWLVocabularyTest to save terminology graphs constructed & verify the construction after loading them back

Version 0.5: January 15, 2015

Change the modeling of data relationships:

Previously: ModelEntityDataRelationship, ModelStructuredDataRelationship
- These 2 types were intended for data relationships from an entity or structured data type respectively to a datatype (scalar or structured)
  This would complicate the binding to OWL where the distinction between scalar vs. structured datatype matters (OWL DataType vs. OWL Class)

Now: Distinguish data relationships from entities vs. structured data types and to scala vs. structured datatypes

- This results in 4 kinds of relationships at the TBox level:
ModelDataRelationshipFromEntityToScalar
ModelDataRelationshipFromEntityToStructure
ModelDataRelationshipFromStructureToScalar
ModelDataRelationshipFromStructureToStructure

- and 4 at the ABox level:
ModelInstanceDataRelationshipFromEntityToScalar
ModelInstanceDataRelationshipFromEntityToStructure
ModelInstanceDataRelationshipFromStructureToScalar
ModelInstanceDataRelationshipFromStructureToStructure

Version 0.4: January 14, 2015

Use sbt-license-plugin, version 0.1.4, which incorporates the functionality to format the license header for all sources

Version 0.3: January 14, 2015

New unit test: 'OMFVocabularyTest' based on patterns found in the IMCE foundation ontologies
New concrete type: 'ModelEntityAspect' (e.g., base:IdentifiedElement)
New concrete axiom: 'EntityDefinitionAspectSubClassAxiom'
Add support for specifying 'abstract' concepts & relationships
Add support for specifying the names of the unreified relationship and, optionally, of the unreified inverse relationship

Version 0.2: January 13, 2015

Refactor the API for a factory-oriented paradigm for construction.
Previously, the API had "make..." constructors which were difficult
to binding to factory-oriented APIs like OWLAPI or MD's UML.

Version 0.1: January 12, 2015

Initial contribution.